{"version":3,"sources":["components/MyCalculator/MyCalculator.tsx","components/Button/Button.tsx","reportWebVitals.ts","index.tsx"],"names":["MyCalculator","React","useState","curExpr","setCurExpr","calculated","setCalculated","DEVIDE_SIGN","MULTIPLY_SIGN","endsWithOperator","lastNumHasDot","replaceSigns","str","readyStr","indexOf","replace","handleClear","e","handleNumbers","num","target","value","console","log","test","handleOperators","opr","tempExpr","substr","length","handleDecimal","handleCalculate","answer","eval","toString","css","id","type","label","onClick","href","rel","Button","props","restProps","styles","btn","btnNumber","btnOperator","btnEqual","btnReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9083e049.chunk.js","sourcesContent":["import React from \"react\";\n/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro'\nimport {css} from '@emotion/react'\nimport Button from \"../Button/Button\";\n\nconst MyCalculator = () => {\n  const [curExpr, setCurExpr] = React.useState('0');\n  const [calculated, setCalculated] = React.useState(true);\n  const DEVIDE_SIGN = 'รท';\n  const MULTIPLY_SIGN = 'ร';\n  const endsWithOperator = /[+-/*]$/;\n  //const endsWithDot = /\\.$/\n  const lastNumHasDot = /\\.\\d*$/\n  \n  const replaceSigns = (str: string) => {\n    let readyStr = str || '';\n    while(readyStr.indexOf('/') >= 0)\n      readyStr = readyStr.replace(\"/\", DEVIDE_SIGN);\n    \n    while(readyStr.indexOf('*') >= 0)\n      readyStr = readyStr.replace(\"*\", MULTIPLY_SIGN);\n\n    return readyStr;\n  }\n\n  const handleClear = (e: any) => {\n    setCurExpr('0');\n  }\n\n  const handleNumbers = (e: any) => {\n    const num = e.target.value;\n    console.log(curExpr, num, endsWithOperator.test(curExpr));\n    setCurExpr(curExpr === \"0\" || calculated ? num : curExpr + num);\n    setCalculated(false);\n  }\n  \n  const handleOperators = (e: any) => {\n    const opr = e.target.value;\n    console.log(curExpr, opr, endsWithOperator.test(curExpr));\n    if(opr !== '-' && endsWithOperator.test(curExpr)) {\n      let tempExpr = curExpr.substr(0, curExpr.length - 1);\n      \n      // Remove the last operator, if there were 2 operators at the end of expression\n      if(endsWithOperator.test(tempExpr))\n        tempExpr = tempExpr.substr(0, tempExpr.length - 1);\n      tempExpr += opr;\n      setCurExpr(tempExpr);\n    }\n    else\n      setCurExpr(curExpr + opr);\n    setCalculated(false);\n  }\n  \n  const handleDecimal = () => {\n    if (! lastNumHasDot.test(curExpr))\n      setCurExpr(curExpr + '.');\n  }\n  \n  const handleCalculate = () => {\n    let tempExpr = curExpr;\n\n    if(endsWithOperator.test(curExpr)) {\n      let tempExpr = curExpr.substr(0, curExpr.length - 1);\n      \n      // Remove the last operator, if there were 2 operators at the end of expression\n      if(endsWithOperator.test(tempExpr))\n        tempExpr = tempExpr.substr(0, tempExpr.length - 1);\n      setCurExpr(tempExpr);\n    }\n    \n    // eslint-disable-next-line no-eval\n    let answer = eval(tempExpr);\n    setCurExpr(answer.toString());\n    setCalculated(true);\n  }\n\n  return (\n    <>\n      <h1 css={[tw`text-center text-6xl animate-pulse`, css`font-family: digital-7`]}>My Calculator</h1>\n\n      <div id=\"calculator\" css={[tw`border-0 mx-auto p-1`, css`width: 21rem`]}>\n        <div css={[tw`w-full bg-white text-gray-700 p-2.5 box-border text-5xl h-20 flex justify-end items-center`, css`font-family: digital-7`]} id=\"display\">{replaceSigns(curExpr)}</div>\n\n        <div id=\"buttons\" tw=\"flex justify-center flex-wrap bg-white\">\n          <Button type=\"reset\" label=\"Clear\" tw=\"w-40\" onClick={handleClear} />\n          <Button type=\"operator\" label={DEVIDE_SIGN} value=\"/\" onClick={handleOperators} />\n          <Button type=\"operator\" label={MULTIPLY_SIGN} value=\"*\" onClick={handleOperators} />\n\n          <Button type=\"number\" label=\"7\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\"8\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\"9\" onClick={handleNumbers} />\n          <Button type=\"operator\" label=\"-\" onClick={handleOperators} />\n\n          <Button type=\"number\" label=\"4\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\"5\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\"6\" onClick={handleNumbers} />\n          <Button type=\"operator\" label=\"+\" onClick={handleOperators} />\n\n          <Button type=\"number\" label=\"1\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\"2\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\"3\" onClick={handleNumbers} />\n\n          <Button type=\"equal\" label=\"=\" tw=\"h-40\" onClick={handleCalculate} />\n          <Button type=\"number\" label=\"0\" tw=\"w-40 -my-20 -mx-10\" onClick={handleNumbers} />\n          <Button type=\"number\" label=\".\" tw=\"-my-20 mx-10\" onClick={handleDecimal} />\n        </div>\n      </div>\n\n      <h1 css={[tw`text-center text-lg text-gray-400 cursor-pointer hover:animate-ping`]}>\n        <a href=\"http://www.Armoun.com\" target=\"_blank\" rel=\"noreferrer\">Developed By: EmIT</a>\n      </h1>\n    </>\n  );\n}\n\nexport default MyCalculator;\n","import React from \"react\";\n/** @jsxImportSource @emotion/react */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport tw from 'twin.macro'\nimport {css} from '@emotion/react'\n\ninterface ButtonProps {\n  label: string;\n  type: \"number\" | \"operator\" | \"equal\" | \"reset\";\n  value?: string;\n  onClick: (e: any) => void;\n}\n\nconst Button = (props: ButtonProps) => {\n  let {label, type, value, onClick, ...restProps} = props;\n  if(!value)\n    value = label;\n\n  const styles = {\n    btn: [\n      tw`w-18 h-18 border-0 m-1 rounded-md shadow-inner text-5xl\n      cursor-pointer hover:text-white\n      transition-all duration-700`,\n      css`box-shadow: inset 0px 0px 8px 2px rgb(98 34 112 / 10%);`\n    ],\n    btnNumber: tw`bg-purple-200 hover:bg-purple-300`,\n    btnOperator: tw`bg-indigo-200 hover:bg-indigo-300`,\n    btnEqual: tw`bg-green-100 hover:bg-green-200`,\n    btnReset: tw`bg-red-300 hover:bg-red-400`\n  }\n\n  return (\n    <button value={value} onClick={onClick} {...restProps}\n      css={[styles.btn,\n        type==='number' && styles.btnNumber,\n        type==='operator' && styles.btnOperator,\n        type==='equal' && styles.btnEqual,\n        type==='reset' && styles.btnReset\n      ]}\n    >\n      {label}\n    </button>\n  )\n}\n\nexport default Button\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport MyCalculator from './components/MyCalculator/MyCalculator';\nimport { GlobalStyles } from 'twin.macro'\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <MyCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}